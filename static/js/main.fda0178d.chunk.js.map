{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchChange","className","type","placeholder","onChange","Card","props","name","email","id","alt","src","CardList","robots","cardsArray","map","user","i","key","scroll","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Scroll","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACpB,OACC,yBAAKC,UAAU,OACf,2BACAA,UAAU,mCACTC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCSEK,EAdF,SAACC,GAAW,IAChBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACrB,OACC,yBAAKR,UAAU,mDACd,yBAAKS,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCOOI,EAdE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAEZC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIF,KAAMM,EAAOI,GAAGV,KAAMC,MAAOK,EAAOI,GAAGT,WAE/E,OACC,6BACIM,EACD,kBAAC,EAAD,CAAMP,KAAO,mBAAmBC,MAAQ,6BAA6BC,GAAG,OACxE,kBAAC,EAAD,CAAMF,KAAO,cAAcC,MAAQ,iBAAiBC,GAAG,SCH9CU,G,MARA,SAACb,GACf,OACC,yBAAKc,MAAO,CAACC,UAAW,SAAUC,OAAO,UACvChB,EAAMiB,YCkBKC,E,kDApBd,WAAYlB,GAAO,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACZC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,6DAGDG,KAAKvB,MAAMiB,a,GAjBOQ,aCgEZC,E,kDAjDd,aAAc,IAAD,8BACZ,gBAiBDC,eAAiB,SAACC,GAEjB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAjB1C,EAAKZ,MAAQ,CACZZ,OAAQ,GACRsB,YAAa,IALF,E,gEAWO,IAAD,OAClBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEjB,OAAQ6B,S,+BAQjC,MAEyBb,KAAKJ,MAA7BZ,EAFD,EAECA,OAAQsB,EAFT,EAESA,YACVQ,EAAiB9B,EAAO+B,QAAO,SAAAC,GACpC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASZ,EAAYW,kBAEtD,OAAKjC,EAAOmC,OAMV,yBAAK/C,UAAU,MACd,6CACA,kBAAC,EAAD,CAAWD,aAAc6B,KAAKI,iBAC9B,kBAACgB,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpC,OAAQ8B,OAVd,wBAAI1C,UAAU,MAAd,kB,GA/BQ8B,aCJlBmB,IAASC,OACT,kBAAC,EAAD,MACAC,SAASC,eAAe,SPsHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.fda0178d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) =>{\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t<input\r\n\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t type=\"search\" \r\n\t\t placeholder=\"Search Robots\"\r\n\t\t onChange={searchChange}\r\n\t\t  />\r\n\t\t </div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//here you have to import the react ^^\r\n//and you make a function to each component, here are the cards\r\nconst Card = (props) => {\r\n\tconst { name, email, id} = props; //destructuring so you dont have to props.each\r\n\treturn(\r\n\t\t<div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt='Robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n//export it\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) =>{\r\n\t//map array to let all robots in the view\r\n\t const cardsArray = robots.map((user, i) =>{\r\n\t \treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t })\r\n\t return(\r\n\t \t<div>\r\n\t\t    {cardsArray}\r\n\t\t    <Card name = 'rafael rosquilds' email = 'rafambomdebola@hotmail.com' id=\"24\"/>\r\n\t\t    <Card name = 'jacen merek' email = 'jpd@hahaha.com' id=\"12\"/>\r\n\t    </div>\r\n\t );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', height:'490px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t); \r\n};\r\n\r\nexport default scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oops, something wrong happend</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport SearchBox from '../components/SearchBox'\r\nimport CardList from '../components/CardList'\r\nimport './app.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from './ErrorBoundry'\r\n\r\n//document which will recive all the docuuments of the project\r\n//so the index just recive the app and thats it\r\n//u can see that i used fragment but didnt imported it just used as a method\r\n\r\n//PROPS = things that come out of state\r\n//STATE = descbribes the application, changes the properties\r\n\r\n//this is the app component which is a object with methods\r\nclass App extends Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\t//the state of the component which sets the props\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\t//this runs after constructor, fetch the users, in this case the API,\r\n\t// then literally .then response.json() and setstate of robots as users.\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=> response.json())\r\n\t\t\t.then(users => this.setState({ robots: users}))\r\n\t\t}\r\n\t\t\r\n\t//onsearchchange that is in the searchbox also sets the state, that meaning it refreshs it\r\n\tonSearchChange = (event) => {\r\n\t\t//the searchfield is equal to the event target value that meaning it will be what you are looking for\r\n\t\tthis.setState({ searchfield: event.target.value })\t\r\n\t}\r\n\trender(){\r\n\t\t//const filteredRObots filter the search box by the names\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif (!robots.length){\r\n\t\t\treturn <h1 className=\"tc\">Loading...</h1>\r\n\t\t}else{\r\n\t\t\t//then set the robots that are displayed as the filtered, so if the search bar has something\r\n\t\t\t//list only the filtered ones, it searchfield is empty show all.\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1>Robot Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} /> \r\n\t\t\t\t\t</ErrorBoundry>\t\r\n\r\n\t\t\t\t\t</Scroll>\t\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './containers/App'\t\r\n\r\n\r\n//react functions like that, you have te big file and you have to return the documents\r\n// you are using JSX when using these html alike tags, when you want to use js\r\n// you should just use the {}. \r\nReactDOM.render(\r\n<App />, \r\ndocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}